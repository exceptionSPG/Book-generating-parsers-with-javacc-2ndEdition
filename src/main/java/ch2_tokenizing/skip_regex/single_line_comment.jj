// a. Optional options
options {
    BUILD_PARSER = true;
    OUTPUT_DIRECTORY = "./single-line-comment/";
}

// b. Parser class definition

PARSER_BEGIN(SingleLineComment)
import java.io.*;
public class SingleLineComment {

}
PARSER_END(SingleLineComment)

TOKEN_MGR_DECLS : {
    public static void main(String[] args) {
        StringReader sr = new StringReader(args[0]);
        SimpleCharStream scs = new SimpleCharStream(sr);
        SingleLineCommentTokenManager mgr = new SingleLineCommentTokenManager(scs);
        for(Token t = mgr.getNextToken(); t.kind != EOF; t = mgr.getNextToken()){
            debugStream.println("Found token: "+t.image);
        }
    }
}

// c. Lexical specification
SKIP : {
    <SINGLE_LINE_COMMENT: "^^" (~["\r", "\n"])* ("\r" | "\n" | "\r\n")?>
    | " "

    // if our language allows to end comment without trailing new-line
    //<SINGLE_LINE_COMMENT_OPTIONAL_NEWLINE: "^^" (~["\r", "\n"])* ("\r" | "\n" | "\r\n")?>

}
TOKEN : {
    <HELLO: "hello">
}


// d. Syntactic specification



